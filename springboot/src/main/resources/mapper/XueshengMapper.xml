<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.XueshengMapper">

    <!-- 定义查询的基础列，避免在多个查询中重复写相同的列 -->
    <sql id="Base_Column_List">
        id, username, password, name, avatar, role, college_id, speciality_id, class_id, xuefen
    </sql>

    <!-- 查询所有学生的信息，并联接查询相关的学院、专业和班级名称 -->
    <select id="selectAll" resultType="com.example.entity.Xuesheng">
        <!-- 查询学生的详细信息，并且通过 LEFT JOIN 获取学院、专业和班级名称 -->
        select xuesheng.*,
        xueyuan.name as collegeName,
        speciality.name as specialitymingcheng,
        banji.name as className
        from xuesheng
        left join xueyuan on xuesheng.college_id = xueyuan.id
        left join speciality on xuesheng.speciality_id = speciality.id
        left join banji on xuesheng.class_id = banji.id
        <where>
            <!-- 根据条件动态生成查询语句，确保只查询需要的数据 -->
            <choose>
                <when test="id != null"> and xuesheng.id = #{id}</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="username != null"> and xuesheng.username like concat('%', #{username}, '%')</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="password != null"> and xuesheng.password = #{password}</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="name != null"> and xuesheng.name = #{name}</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="avatar != null"> and xuesheng.avatar = #{avatar}</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="role != null"> and xuesheng.role = #{role}</when>
                <otherwise></otherwise>
            </choose>
        </where>
    </select>

    <!-- 根据ID查询单个学生的详细信息 -->
    <select id="selectById" resultType="com.example.entity.Xuesheng">
        <!-- 引入基础列定义，避免重复列出所有字段 -->
        select
        <include refid="Base_Column_List" />
        from xuesheng
        where id = #{id} <!-- 精确匹配ID -->
    </select>

    <!-- 删除指定ID的学生记录 -->
    <delete id="deleteById">
        <!-- 通过ID删除学生信息 -->
        delete from xuesheng
        where id = #{id} <!-- 通过ID精确删除学生记录 -->
    </delete>

    <!-- 插入一条新的学生记录 -->
    <insert id="insert" parameterType="com.example.entity.Xuesheng" useGeneratedKeys="true">
        <!-- 动态插入学生信息，并且自动生成主键ID -->
        insert into xuesheng (username, password, name, avatar, role, college_id, speciality_id, class_id, xuefen)
        values (#{username}, #{password}, #{name}, #{avatar}, #{role}, #{collegeId}, #{specialityId}, #{classId}, #{xuefen})
        <!-- useGeneratedKeys="true" 表示自动生成ID并回填到实体对象的ID字段 -->
    </insert>

    <!-- 更新指定ID的学生信息 -->
    <update id="updateById" parameterType="com.example.entity.Xuesheng">
        update xuesheng
        <set>
            <!-- 只有在传入的字段不为null时，才会更新该字段 -->
            <choose>
                <when test="username != null">username = #{username},</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="password != null">password = #{password},</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="name != null">name = #{name},</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="avatar != null">avatar = #{avatar},</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="role != null">role = #{role},</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="collegeId != null">college_id = #{collegeId},</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="specialityId != null">speciality_id = #{specialityId},</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="classId != null">class_id = #{classId},</when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="xuefen != null">xuefen = #{xuefen},</when>
                <otherwise></otherwise>
            </choose>
        </set>
        where id = #{id} <!-- 根据ID定位要更新的记录 -->
    </update>

</mapper>
